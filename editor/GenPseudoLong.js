/** ================================================================
 * JSMC_external
 * copyright (c) 2024- Ayasaka-Koto, All rights reserved.
================================================================= */
let m = "Linear", n = "Sine", o = "Quad", p = "Cubic", q = "Quart", r = "Expo", s = "Circ", t = "_In", u = "_Out", v = "_InOut", _ = (e, a) => a <= 0 ? 0 : a >= 1 ? 1 : e == m + t ? a : e == m + u ? a : e == m + v ? a : e == n + t ? 2 * Math.acos(1 - a) / Math.PI : e == n + u ? 2 * Math.asin(a) / Math.PI : e == n + v ? Math.acos(1 - 2 * a) / Math.PI : e == o + t ? Math.sqrt(a) : e == o + u ? 1 - Math.sqrt(1 - a) : e == o + v ? a < .5 ? Math.sqrt(a / 2) : 1 - Math.sqrt(1 - 2 * a) / 2 : e == p + t ? Math.cbrt(a) : e == p + u ? 1 - Math.cbrt(1 - a) : e == p + v ? a < .5 ? Math.cbrt(a / 4) : 1 - Math.cbrt(1 - 2 * a) / 2 : e == q + t ? Math.sqrt(Math.sqrt(a)) : e == q + u ? 1 - Math.sqrt(Math.sqrt(1 - a)) : e == q + v ? a < .5 ? Math.sqrt(Math.sqrt(a / 8)) : 1 - Math.sqrt(Math.sqrt(1 - 2 * a)) / 2 : e == r + t ? Math.log2(a) / 10 + 1 : e == r + u ? 0 - Math.log2(1 - a) / 10 : e == r + v ? a < .5 ? Math.log2(2 * a) / 20 + .5 : .5 - Math.log2(2 - 2 * a) / 20 : e == s + t ? Math.sqrt(2 * a - a ** 2) : e == s + u ? 1 - Math.sqrt(1 - a ** 2) : e == s + v ? a < .5 ? Math.sqrt(a - a ** 2) : 1 - Math.sqrt(a - a ** 2) : a, w = window.prompt('譜面の beats の値を入力してください。("は含まない)'), x = "[", y = Function("return " + w), z = Function("return " + input)(), $ = [0, 0]; for (let i = 2; i < z.reduce((e, a) => a.end.when[0] > e.end.when[0] ? a : e).end.when[0] + 10; i++) { let [e, a] = y(i - 1); $[i] = $[i - 1] + 4 * e / a } z.forEach(e => {
    x += "\n"; let a = $[e.start.when[0]] + 4 * e.start.when[1] / e.start.when[2], h = $[e.end.when[0]] + 4 * e.end.when[1] / e.end.when[2]; for (let d = Math.ceil(a * 4) / 4; d <= h; d += 1 / 4) {
        let l = $.findIndex(e => e > d) - 1, c = d - $[l], g = (d - a) / (h - a), b = _(e.easing.left, g), I = e.start.where[0] + (e.end.where[0] - e.start.where[0]) * b, f; x += `        { "type":   "hover", "where": [${I.toFixed(2).padStart(5, " ")}, ${(e.start.where[1] + (e.end.where[1] - e.start.where[1]) * _(e.easing.right, g)).toFixed(2).padStart(5, " ")}], "when": [${("" + l).padStart(3, " ")},${(4 * c + "").padStart(3, " ")}, 16], "speed": 1.00, },
`}
}), x += "]"; return x;
